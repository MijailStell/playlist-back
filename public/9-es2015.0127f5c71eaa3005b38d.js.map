{"version":3,"sources":["webpack:///src/app/feature/auth/register/register.component.html","webpack:///src/app/feature/auth/register/register.component.ts","webpack:///src/app/feature/auth/register/register-routing.module.ts","webpack:///src/app/feature/auth/register/register.module.ts"],"names":["RegisterComponent","_formBuilder","authService","messageService","this","setForm","setTimeout","usernameElement","nativeElement","focus","registerForm","group","username","required","minLength","maxLength","email","password","genderId","min","max","valid","value","toLowerCase","register","subscribe","response","reset","successSaveMessage","routes","path","component","RegisterRoutingModule","components","forChild","RegisterModule"],"mappings":"iWAUkB,oBACE,mBAAU,4BAAiB,OAC7B,Q,sBACA,oBACE,mBAAU,yCAA2B,OACvC,Q,sBAKF,oBACE,mBAAU,4BAAiB,OAC7B,Q,sBACA,oBACE,mBAAU,6BAAe,OAC3B,Q,sBAKA,oBACE,mBAAU,yCAA2B,OACvC,Q,sBACA,oBACE,mBAAU,4BAAiB,OAC7B,QCzBT,Y,MAAMA,EAKX,YAAoBC,EACAC,EACAC,GAFA,KAAAF,eACA,KAAAC,cACA,KAAAC,iBAEpB,WACEC,KAAKC,UAGP,kBACEC,WAAW,KACTF,KAAKG,gBAAgBC,cAAcC,SAClC,GAGL,UACEL,KAAKM,aAAeN,KAAKH,aAAaU,MAAM,CAC1CC,SAAU,CAAC,GAAI,CAAC,IAAWC,SAAU,IAAWC,UAAU,GAAI,IAAWC,UAAU,MACnFC,MAAO,CAAC,GAAI,CAAC,IAAWH,SAAU,IAAWG,MAAO,IAAWF,UAAU,GAAI,IAAWC,UAAU,MAClGE,SAAU,CAAC,GAAI,CAAC,IAAWJ,SAAU,IAAWC,UAAU,GAAI,IAAWC,UAAU,MACnFG,SAAU,CAAC,GAAI,CACb,IAAWL,SACX,IAAWM,IAAI,GACf,IAAWC,IAAI,OAKrB,WACMhB,KAAKM,aAAaW,QACpBjB,KAAKM,aAAaY,MAAMN,MAASZ,KAAKM,aAAaY,MAAMN,MAAiBO,cAC1EnB,KAAKF,YAAYsB,SAASpB,KAAKM,aAAaY,OAAOG,UAAUC,IAC3DtB,KAAKM,aAAaiB,QAClBvB,KAAKD,eAAeyB,yB,6CArCf5B,GAAiB,gC,uBAAjBA,EAAiB,qD,GAAA,K,w+BDV9B,gBACE,qBACI,iBAAuD,kCAAY,EAAAwB,aAC/D,4BACI,yBAAgB,uBAAY,OAChC,OACA,6BACI,2BACI,iBAAgB,gBAA6C,OAC7D,qBACA,8BAGA,8BAGJ,OACA,4BACE,kBAAgB,kBAA8C,OAC9D,oBACA,8BAGA,8BAGF,OACA,4BACE,kBAAgB,kBAA6C,OAC7D,oBACA,8BAGA,8BAGF,OACA,4BACE,kBAAgB,kBAA+C,OAC/D,qBAAW,qBAAM,OACjB,yBACE,yBAAwB,uBAAwC,qBAAS,OACzE,yBAAwB,uBAA0C,oBAAQ,OAC5E,OACF,OACJ,OACA,qBAA8F,qBAAS,OACvG,kBACE,mCACA,gBAA8C,yBAAa,OAC/D,OACF,OACJ,OACF,Q,MAnDkC,yCAQJ,0EAGA,0EAOF,sEAGA,mEAOA,0EAGA,yEAQE,wBACA,wBAIE,iD,olECpCzB,GCNP,MAAMK,EAAiB,CACrB,CAAEC,KAAM,GAAIC,UAAW,IAOlB,Y,MAAMC,G,OACJ,EAAAC,WAAa,CAAE,G,uBADXD,I,oDAAAA,IAAqB,SAHvB,CAAC,IAAaE,SAASL,IACtB,O,GAEL,G,gBCCA,Y,MAAMM,G,8BAAAA,I,oDAAAA,IAAc,SALhB,CACP,EACA,Q,GAGG","file":"x","sourcesContent":["<div class=\"register-content\">\n  <mat-card class=\"register-card\">\n      <form class=\"material-form\" [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" class=\"d-flex flex-direction-column align-items-center\">\n          <mat-card-header class=\"card-header\">\n              <mat-card-title>YouTube Room</mat-card-title>\n          </mat-card-header>\n          <mat-card-content class=\"card-content\">\n              <mat-form-field class=\"w-100\">\n                  <span matPrefix><img src=\"./assets/img/icon-user.svg\" alt=\"\"></span>\n                  <input matInput type=\"text\" placeholder=\"Nickname\" #usernameElement formControlName=\"username\">\n                  <mat-error *ngIf=\"registerForm.get('username').hasError('required')\">\n                    <mat-hint>Campo obligatorio</mat-hint>\n                  </mat-error>\n                  <mat-error *ngIf=\"registerForm.get('username').hasError('minlength')\">\n                    <mat-hint>Ingrese mínimo 6 caracteres</mat-hint>\n                  </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"w-100\">\n                <span matPrefix><img src=\"./assets/img/icon-email.svg\" alt=\"\"></span>\n                <input matInput type=\"text\" placeholder=\"Correo\" formControlName=\"email\">\n                <mat-error *ngIf=\"registerForm.get('email').hasError('required')\">\n                  <mat-hint>Campo obligatorio</mat-hint>\n                </mat-error>\n                <mat-error *ngIf=\"registerForm.get('email').hasError('email')\">\n                  <mat-hint>Correo inválido</mat-hint>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"w-100\">\n                <span matPrefix><img src=\"./assets/img/icon-pass.svg\" alt=\"\"></span>\n                <input matInput type=\"password\" placeholder=\"Clave\" formControlName=\"password\">\n                <mat-error *ngIf=\"registerForm.get('password').hasError('minlength')\">\n                  <mat-hint>Ingrese mínimo 6 caracteres</mat-hint>\n                </mat-error>\n                <mat-error *ngIf=\"registerForm.get('password').hasError('required')\">\n                  <mat-hint>Campo obligatorio</mat-hint>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"w-100\">\n                <span matPrefix><img src=\"./assets/img/icon-gender.svg\" alt=\"\"></span>\n                <mat-label>Género</mat-label>\n                <mat-select formControlName=\"genderId\">\n                  <mat-option [value]=\"1\"><mat-icon svgIcon=\"icon-man\"></mat-icon>Masculino</mat-option>\n                  <mat-option [value]=\"2\"><mat-icon svgIcon=\"icon-woman\"></mat-icon>Femenino</mat-option>\n                </mat-select>\n              </mat-form-field>\n          </mat-card-content>\n          <button type=\"submit\" [disabled]=\"!registerForm.valid\" mat-raised-button class=\"btn-register\">Registrar</button>\n          <div class=\"mt-2\">\n            ¿Ya tienes cuenta?\n            <a class=\"goToLogin\" routerLink=\"/auth/login\">Ingresa ahora</a>\n        </div>\n      </form>\n  </mat-card>\n</div>\n\n\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/core/services/auth.service';\nimport { MessageService } from 'src/app/shared/services/message.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('usernameElement', { static: false }) usernameElement: ElementRef;\n  registerForm: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder,\n              private authService: AuthService,\n              private messageService: MessageService) { }\n\n  ngOnInit(): void {\n    this.setForm();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.usernameElement.nativeElement.focus();\n    }, 0);\n  }\n\n  setForm(): void {\n    this.registerForm = this._formBuilder.group({\n      username: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(50)]],\n      email: ['', [Validators.required, Validators.email, Validators.minLength(6), Validators.maxLength(50)]],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(50)]],\n      genderId: ['', [\n        Validators.required,\n        Validators.min(1),\n        Validators.max(2)]\n      ]\n    });\n  }\n\n  register(): void {\n    if (this.registerForm.valid) {\n      this.registerForm.value.email = (this.registerForm.value.email as string).toLowerCase();\n      this.authService.register(this.registerForm.value).subscribe(response => {\n        this.registerForm.reset();\n        this.messageService.successSaveMessage();\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [\n  { path: '', component: RegisterComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule {\n  static components = [ RegisterComponent ];\n }\n","import { NgModule } from '@angular/core';\n\nimport { RegisterRoutingModule } from './register-routing.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n  declarations: [RegisterRoutingModule.components],\n  imports: [\n    RegisterRoutingModule,\n    SharedModule\n  ]\n})\nexport class RegisterModule { }\n"]}