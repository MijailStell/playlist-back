{"version":3,"sources":["webpack:///src/app/core/services/data.service.ts","webpack:///src/app/feature/auth/login/login.component.html","webpack:///src/app/feature/auth/login/login.component.ts","webpack:///src/app/feature/auth/login/login-routing.module.ts","webpack:///src/app/feature/auth/login/login.module.ts"],"names":["DataService","roomList","id","name","of","this","LoginComponent","LoginRoutingModule","LoginModule","globalService","dataService","authService","router","_formBuilder","setForm","loadRoomList","setTimeout","emailElement","nativeElement","focus","emailGuardado","getValueKeyStorage","Email","loginForm","group","email","required","minLength","maxLength","password","roomId","min","max","getRoomList","subscribe","response","valid","room","find","p","value","toLowerCase","login","addKeyStorage","RoomId","RoomName","UId","uid","Username","username","GenderId","genderId","LoginStatus","navigate","RutaBase","routes","path","component","components","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { Room } from 'src/app/shared/models/room';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor() { }\n\n  roomList: Room[]= [\n    { id: 1, name: \"Sala 001\"},\n    { id: 2, name: \"Sala 002\"},\n    { id: 3, name: \"Sala 003\"}\n  ];\n\n  getRoomList() {\n    return of(this.roomList);\n  }\n}\n","<div class=\"login-content\">\r\n  <mat-card class=\"login-card\">\r\n      <form class=\"material-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" class=\"d-flex flex-direction-column align-items-center\">\r\n          <mat-card-header class=\"card-header\">\r\n              <mat-card-title>YouTube Room</mat-card-title>\r\n          </mat-card-header>\r\n          <mat-card-content class=\"card-content\">\r\n              <mat-form-field class=\"w-100\">\r\n                <span matPrefix><img src=\"./assets/img/icon-email.svg\" alt=\"\"></span>\r\n                <input matInput type=\"text\" placeholder=\"Correo\" #emailElement formControlName=\"email\">\r\n                <mat-error *ngIf=\"loginForm.get('email').hasError('required')\">\r\n                  <mat-hint>Campo obligatorio</mat-hint>\r\n                </mat-error>\r\n                <mat-error *ngIf=\"loginForm.get('email').hasError('email')\">\r\n                  <mat-hint>Correo inválido</mat-hint>\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"w-100\">\r\n                <span matPrefix><img src=\"./assets/img/icon-pass.svg\" alt=\"\"></span>\r\n                <input matInput type=\"password\" placeholder=\"Clave\" formControlName=\"password\">\r\n                <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\r\n                  <mat-hint>Campo obligatorio</mat-hint>\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"w-100\">\r\n                <span matPrefix><img src=\"./assets/img/icon-room.svg\" alt=\"\"></span>\r\n                <mat-label>Room</mat-label>\r\n                <mat-select formControlName=\"roomId\">\r\n                  <mat-option *ngFor=\"let room of roomList\" [value]=\"room.id\">\r\n                    {{room.name}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n          </mat-card-content>\r\n          <button type=\"submit\" [disabled]=\"!loginForm.valid\" mat-raised-button class=\"btn-login\">Ingresar</button>\r\n          <div class=\"mt-2\">\r\n            ¿No tienes cuenta?\r\n            <a class=\"register\" routerLink=\"/auth/register\">Regístrate</a>\r\n        </div>\r\n      </form>\r\n  </mat-card>\r\n</div>\r\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/core/services/auth.service';\r\nimport { DataService } from 'src/app/core/services/data.service';\r\nimport { Room } from 'src/app/shared/models/room';\r\nimport { GlobalService } from 'src/app/shared/services/global.service';\r\nimport { LoaderService } from 'src/app/shared/services/loader.service';\r\nimport { Constantes } from 'src/app/shared/util/constantes';\r\nimport { UserLogin } from '../../../core/models/user-login';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, AfterViewInit {\r\n\r\n  @ViewChild('emailElement', { static: false }) emailElement: ElementRef;\r\n  loginForm: FormGroup;\r\n  roomList: Room[] = [];\r\n\r\n  constructor(private globalService: GlobalService,\r\n              private dataService: DataService,\r\n              private authService: AuthService,\r\n              private router: Router,\r\n              private _formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.setForm();\r\n    this.loadRoomList();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.emailElement.nativeElement.focus();\r\n    }, 0);\r\n  }\r\n\r\n  setForm() {\r\n    const emailGuardado = this.globalService.getValueKeyStorage(Constantes.Email) as string;\r\n\r\n    this.loginForm = this._formBuilder.group({\r\n      email: [emailGuardado, [Validators.required, Validators.email, Validators.minLength(6), Validators.maxLength(50)]],\r\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(50)]],\r\n      roomId: ['', [\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(3)]\r\n      ]\r\n    });\r\n  }\r\n\r\n  loadRoomList() {\r\n    this.dataService.getRoomList().subscribe(response => {\r\n      this.roomList = response;\r\n    });\r\n  }\r\n\r\n  login(): void {\r\n    if (this.loginForm.valid) {\r\n      const room = this.roomList.find(p=> p.id === this.loginForm.value.roomId);\r\n      this.loginForm.value.email = (this.loginForm.value.email as string).toLowerCase();\r\n      this.authService.login(this.loginForm.value).subscribe(response => {\r\n        this.globalService.addKeyStorage(Constantes.RoomId, room.id);\r\n        this.globalService.addKeyStorage(Constantes.RoomName, room.name);\r\n        this.globalService.addKeyStorage(Constantes.UId, response.uid);\r\n        this.globalService.addKeyStorage(Constantes.Username, response.username);\r\n        this.globalService.addKeyStorage(Constantes.GenderId, response.genderId);\r\n        this.globalService.addKeyStorage(Constantes.LoginStatus, true);\r\n        this.router.navigate([Constantes.RutaBase]);\r\n      });\r\n\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule {\n  static components = [ LoginComponent ];\n}\n","import { NgModule } from '@angular/core';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n  declarations: [LoginRoutingModule.components],\n  imports: [\n    LoginRoutingModule,\n    SharedModule\n  ]\n})\nexport class LoginModule { }\n"]}